### JWT 발급? => username & password => form-data
POST {{baseUrl}}/auth/token
Content-Type: application/x-www-form-urlencoded

username = tester &
password = 1234

> {%
    client.test('JWT 발급(username & password 인증)', () => {
        client.assert(response.status === 200, "Expected 200 OK")

        const fields = ['accessToken', 'refreshToken']
        fields.forEach(field => {
            client.assert(response.body.data[field] != null, `Expected ${field} in response`)
        })

        client.global.set("accessToken", response.body?.data?.accessToken)
        client.global.set("refreshToken", response.body?.data?.refreshToken)
    })
%}

### JWT 발급? => username & password => json
POST {{baseUrl}}/auth/token
Content-Type: application/json

{
  "username": "user",
  "password": "pass"
}

> {%
    client.test('', () => {
        client.assert(response.status === 200, "Expected 200 OK")

        client.global.set("accessToken", response.body.data.accessToken)
    })
%}

### JWT refresh
GET {{baseUrl}}/auth/refresh
Authorization: Bearer {{refreshToken}}
